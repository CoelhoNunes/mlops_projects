name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: test (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r config/requirements.txt

      - name: Run unit tests
        run: |
          pytest -q

      - name: Upload test results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            .pytest_cache
            reports/**
          if-no-files-found: ignore

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeQL init
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: CodeQL analyze
        uses: github/codeql-action/analyze@v3

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff black mypy
    
    - name: Check for forbidden trackers
      run: |
        # Check for forbidden trackers (should fail CI if found)
        if grep -r --exclude-dir={.git,.github,node_modules,.venv,venv,__pycache__} --exclude={*.pyc,*.pyo} -i "zenml\|wandb\|neptune\|dvc\|airflow\|prefect\|argo" .; then
          echo "❌ Forbidden trackers found! Only MLflow is allowed."
          exit 1
        fi
        echo "✅ No forbidden trackers found"
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
    
    - name: Format check with black
      run: |
        black --check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json

  build:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker build -f Dockerfile.train -t mlops-trainer:latest .
        docker build -f Dockerfile.serve -t mlops-server:latest .
    
    - name: Test Docker images
      run: |
        # Test that images can run basic commands
        docker run --rm mlops-trainer:latest python -c "import mlops; print('Trainer image OK')"
        docker run --rm mlops-server:latest python -c "import mlops; print('Server image OK')"

  repository-health:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check repository size
      run: |
        REPO_SIZE=$(du -sh . --exclude=.git --exclude=.venv --exclude=venv | cut -f1)
        echo "Repository size: $REPO_SIZE"
        
        # Warn if repository is too large
        if [[ $(du -s . --exclude=.git --exclude=.venv --exclude=venv | cut -f1) -gt 100000 ]]; then
          echo "⚠️  Repository is larger than 100MB. Consider cleanup."
        fi
    
    - name: Check for large files
      run: |
        echo "Large files (>10MB):"
        find . -type f -size +10M -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" | head -10
    
    - name: Check for dead code
      run: |
        if command -v vulture > /dev/null; then
          pip install vulture
        fi
        
        if command -v vulture > /dev/null; then
          echo "Dead code analysis:"
          vulture mlops/ tests/ --min-confidence 80 || true
        else
          echo "Vulture not available for dead code analysis"
        fi
    
    - name: Check for unused imports
      run: |
        if command -v ruff > /dev/null; then
          echo "Unused imports check:"
          ruff check --select=F401,F841 mlops/ tests/ || true
        else
          echo "Ruff not available for unused import check"
        fi
