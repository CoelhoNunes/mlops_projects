name: Build and Push Docker Images

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image_type:
        description: 'Image type to build'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - train
          - serve

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        image: [train, serve]
        include:
          - image: train
            dockerfile: Dockerfile.train
            target: mlops-trainer
          - image: serve
            dockerfile: Dockerfile.serve
            target: mlops-server
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Test Docker image
      run: |
        # Test that the image can be pulled and basic functionality works
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}:latest
        
        # Run a quick test to ensure the image works
        if [ "${{ matrix.image }}" = "serve" ]; then
          # Test serving image
          docker run --rm -d --name test-serve \
            -p 8000:8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}:latest
          
          # Wait for service to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8000/healthz || exit 1
          
          # Cleanup
          docker stop test-serve
        else
          # Test training image
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}:latest \
            python -c "import mlops; print('Training image works')" || exit 1
        fi
        
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-trainer:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'pull_request'
    environment: preview
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Deploy to preview environment
      run: |
        # This would deploy to a preview environment
        # For now, just echo the deployment command
        echo "Would deploy to preview environment with:"
        echo "kubectl apply -f k8s/ -n mlops-preview"
        echo "Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-serve:pr-${{ github.event.number }}"
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Deploy to production
      run: |
        # Deploy to production environment
        kubectl apply -f k8s/ -n mlops
        
        # Update deployment to use new image
        kubectl set image deployment/mlops-server \
          mlops-server=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-serve:${{ github.ref_name }} \
          -n mlops
          
        # Wait for rollout
        kubectl rollout status deployment/mlops-server -n mlops
        
        # Verify deployment
        kubectl get pods -n mlops -l app=mlops-server
        
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Docker build failed for ${{ github.repository }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Docker build succeeded for ${{ github.repository }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
