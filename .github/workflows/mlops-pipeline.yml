name: MLOps Pipeline

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  # Trigger on pull requests to main branch
  pull_request:
    branches: [ main ]
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      build_gpu:
        description: 'Build GPU training image (amd64 only)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip tests (for debugging)'
        required: false
        default: false
        type: boolean
  # Daily heartbeat at 17:00 UTC
  schedule:
    - cron: "0 17 * * *"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

concurrency:
  group: mlops-pipeline-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # =============================================================================
  # TESTING & CODE QUALITY
  # =============================================================================
  
  test:
    name: Test (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.skip_tests }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('config/requirements.txt', 'config/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r config/requirements.txt
          pip install pytest pytest-cov ruff black

      - name: Check for forbidden trackers
        run: |
          # Check for forbidden trackers (should fail CI if found)
          if grep -r --exclude-dir={.git,.github,node_modules,.venv,venv,__pycache__} --exclude={*.pyc,*.pyo} -i "zenml\|wandb\|neptune\|dvc\|airflow\|prefect\|argo" .; then
            echo "❌ Forbidden trackers found! Only MLflow is allowed."
            exit 1
          fi
          echo "✅ No forbidden trackers found"

      - name: Lint with ruff
        run: |
          ruff check src/ tests/

      - name: Format check with black
        run: |
          black --check src/ tests/

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            .pytest_cache
            coverage.xml
            htmlcov/
          if-no-files-found: ignore

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

      - name: CodeQL init
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: CodeQL analyze
        uses: github/codeql-action/analyze@v3

  # =============================================================================
  # ML TRAINING & VALIDATION
  # =============================================================================
  
  train-test:
    name: Test Training Pipeline
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.skip_tests }}
    needs: [test, security]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r config/requirements.txt
          
      - name: Test training pipeline (smoke test)
        run: |
          python -m src.train --smoke --mlflow-tracking-uri ./mlruns
          
      - name: Verify MLflow artifacts
        run: |
          if [ -d "mlruns" ]; then
            echo "✅ MLflow artifacts created successfully"
            find mlruns -type f | head -10
          else
            echo "❌ MLflow artifacts not found"
            exit 1
          fi

      - name: Upload MLflow artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts
          path: mlruns/
          if-no-files-found: ignore

  # =============================================================================
  # DOCKER BUILD & DEPLOY
  # =============================================================================
  
  build-cpu-image:
    name: Build CPU Training Image
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name != 'pull_request' }}
    needs: [test, security, train-test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Normalize image name to lowercase
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push CPU training image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/docker/Dockerfile.train
          target: cpu-trainer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          
      - name: Test CPU image
        run: |
          # Test that the image can be pulled and basic functionality works
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer:latest
          
          # Run a quick test to ensure the image works
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer:latest \
            python -c "import mlflow, sklearn; print('CPU training image works')" || exit 1

  build-gpu-image:
    name: Build GPU Training Image
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name != 'pull_request' && (github.event_name == 'workflow_dispatch' && inputs.build_gpu == 'true') }}
    needs: [test, security, train-test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Normalize image name to lowercase
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gpu-trainer
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push GPU training image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/docker/Dockerfile.train
          target: gpu-trainer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          
      - name: Test GPU image
        run: |
          # Test that the image can be pulled and basic functionality works
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gpu-trainer:latest
          
          # Run a quick test to ensure the image works
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gpu-trainer:latest \
            python3.11 -c "import mlflow, sklearn; print('GPU training image works')" || exit 1

  # =============================================================================
  # CONTAINER SECURITY SCANNING
  # =============================================================================
  
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name != 'pull_request' }}
    needs: [build-cpu-image, build-gpu-image]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner on CPU image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer:latest
          format: 'sarif'
          output: 'trivy-results-cpu.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-cpu.sarif'

  # =============================================================================
  # CONTRIBUTION HEARTBEAT
  # =============================================================================
  
  heartbeat:
    name: Update Contribution Heartbeat
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'schedule' }}
    permissions:
      contents: write
    
    steps:
      - name: Check for PAT secret
        id: has_pat
        run: |
          if [ -z "${{ secrets.PAT_FOR_CONTRIB }}" ]; then
            echo "present=false" >> $GITHUB_OUTPUT
          else
            echo "present=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout (no bot creds)
        if: steps.has_pat.outputs.present == 'true'
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Configure author
        if: steps.has_pat.outputs.present == 'true'
        run: |
          git config user.name "CoelhoNunes"
          git config user.email "coelhonunes@users.noreply.github.com"

      - name: Update heartbeat file
        if: steps.has_pat.outputs.present == 'true'
        run: |
          mkdir -p .github
          printf "last_heartbeat_utc=%s\n" "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > .github/_last_heartbeat
          git add .github/_last_heartbeat
          if git diff --cached --quiet; then
            echo "No change; nothing to commit."
            exit 0
          fi
          git commit -m "chore(contrib): heartbeat [skip ci]"
      
      - name: Push commit to main
        if: steps.has_pat.outputs.present == 'true'
        env:
          PAT_FOR_CONTRIB: ${{ secrets.PAT_FOR_CONTRIB }}
        run: |
          git push https://x-access-token:${PAT_FOR_CONTRIB}@github.com/${{ github.repository }} HEAD:main

      - name: Summary when PAT missing
        if: steps.has_pat.outputs.present != 'true'
        run: echo "PAT_FOR_CONTRIB not set; skipping heartbeat without failing."

  # =============================================================================
  # NOTIFICATIONS & CLEANUP
  # =============================================================================
  
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-cpu-image, build-gpu-image, container-security]
    if: always()
    
    steps:
      - name: Notify on failure
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'MLOps pipeline failed for ${{ github.repository }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true
          
      - name: Notify on success
        if: ${{ success() }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'MLOps pipeline succeeded for ${{ github.repository }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # =============================================================================
  # REPOSITORY HEALTH CHECK
  # =============================================================================
  
  repository-health:
    name: Repository Health Check
    runs-on: ubuntu-latest
    needs: [test, security]
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check repository size
        run: |
          REPO_SIZE=$(du -sh . --exclude=.git --exclude=.venv --exclude=venv | cut -f1)
          echo "Repository size: $REPO_SIZE"
          
          # Warn if repository is too large
          if [[ $(du -s . --exclude=.git --exclude=.venv --exclude=venv | cut -f1) -gt 100000 ]]; then
            echo "⚠️  Repository is larger than 100MB. Consider cleanup."
          fi
      
      - name: Check for large files
        run: |
          echo "Large files (>10MB):"
          find . -type f -size +10M -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" | head -10
      
      - name: Check for dead code
        run: |
          if command -v vulture > /dev/null; then
            pip install vulture
          fi
          
          if command -v vulture > /dev/null; then
            echo "Dead code analysis:"
            vulture src/ tests/ --min-confidence 80 || true
          else
            echo "Vulture not available for dead code analysis"
          fi
      
      - name: Check for unused imports
        run: |
          if command -v ruff > /dev/null; then
            echo "Unused imports check:"
            ruff check --select=F401,F841 src/ tests/ || true
          else
            echo "Ruff not available for unused import check"
          fi
