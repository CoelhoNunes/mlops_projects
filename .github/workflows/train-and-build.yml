name: Train and Build Docker Images

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_gpu:
        description: 'Build GPU training image (amd64 only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-training:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    name: Test Training Pipeline
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r config/requirements.txt
        
    - name: Run linting (if config exists)
      run: |
        if [ -f "pyproject.toml" ] && grep -q "ruff" pyproject.toml; then
          pip install ruff
          ruff check src/
        fi
      continue-on-error: true
        
    - name: Test training pipeline (smoke test)
      run: |
        python -m src.train --smoke --mlflow-tracking-uri ./mlruns
        
    - name: Verify MLflow artifacts
      run: |
        if [ -d "mlruns" ]; then
          echo "✅ MLflow artifacts created successfully"
          find mlruns -type f | head -10
        else
          echo "❌ MLflow artifacts not found"
          exit 1
        fi

  build-cpu-image:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: test-training
    name: Build CPU Training Image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push CPU training image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile.train
        target: cpu-trainer
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Test CPU image
      run: |
        # Test that the image can be pulled and basic functionality works
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer:latest
        
        # Run a quick test to ensure the image works
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer:latest \
          python -c "import mlflow, sklearn; print('CPU training image works')" || exit 1

  build-gpu-image:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name != 'pull_request' && (github.event_name == 'workflow_dispatch' && inputs.build_gpu == 'true') }}
    runs-on: ubuntu-latest
    needs: test-training
    name: Build GPU Training Image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gpu-trainer
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push GPU training image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile.train
        target: gpu-trainer
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Test GPU image
      run: |
        # Test that the image can be pulled and basic functionality works
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gpu-trainer:latest
        
        # Run a quick test to ensure the image works
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gpu-trainer:latest \
          python3.11 -c "import mlflow, sklearn; print('GPU training image works')" || exit 1

  security-scan:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build-cpu-image, build-gpu-image]
    name: Security Scan
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner on CPU image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu-trainer:latest
        format: 'sarif'
        output: 'trivy-results-cpu.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-cpu.sarif'

  notify:
    runs-on: ubuntu-latest
    needs: [build-cpu-image, build-gpu-image, security-scan]
    if: always()
    name: Notify Results
    
    steps:
    - name: Notify on failure
      if: ${{ failure() && secrets.SLACK_WEBHOOK_URL != '' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Docker build failed for ${{ github.repository }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true
        
    - name: Notify on success
      if: ${{ success() && secrets.SLACK_WEBHOOK_URL != '' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Docker build succeeded for ${{ github.repository }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true
